/*
 * Yeti io library.
 *
 * Copyright (c) 2008,2009 Madis Janson
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
module yeti.lang.io;

import java.io: File, FileInputStream, FileOutputStream,
                Reader, InputStream, InputStreamReader, BufferedReader,
                OutputStream, OutputStreamWriter, BufferedWriter;
import java.lang.Thread;

var stdin' = None ();

readerHandle reader is ~BufferedReader -> 'a =
   (var l = []; // used for forcing on close
    var used = false;
    {
        read num =
            Core#read(reader, num),

        readln () =
            synchronized reader do:
                if used then
                    Core#UNDEF_STR
                else
                    reader#readLine()
                fi
            done,

        contents () =
            synchronized reader do:
                if used then
                    Core#UNDEF_STR
                else
                    used := true;
                    try
                        Core#readAll(reader)
                    finally
                        reader#close()
                    yrt
                fi
            done,

        lines () =
            synchronized reader do:
                if used then
                    []
                else
                    used := true;
                    l := (ReaderList#lines(reader) unsafely_as list<string>);
                    l
                fi
            done,

        close () =
            try
                synchronized reader do:
                    if used then
                        _ = length l
                    fi;
                    used := true
                done
            finally
                reader#close()
            yrt,

        rawClose () =
            synchronized reader do:
                used := true;
                reader#close()
            done
    });

stdin () =
    case stdin' of
    Some rh: rh;
    None _:
       (rh = readerHandle new SafeBufferedReader(
                            new InputStreamReader(System#in));
        stdin' := Some rh;
        rh);
    esac;

withHandle h block =
   (try
        block h
    finally
        h.close ()
    yrt);

// to keep close as only provided
inputHandle stream encoding is ~InputStream -> string -> 'a =
   (var nok = true;
    try
        r = new SafeBufferedReader(
                    if encoding == "" then
                        new InputStreamReader(stream)
                    else
                        new InputStreamReader(stream, encoding)
                    fi);
        nok := false;
        readerHandle r
    finally
        if nok then
            stream#close()
        fi
    yrt);

writerHandle writer is ~BufferedWriter -> 'a = {
        write s is string -> () =
            writer#write(s),
        writeln s is string -> () =
            writer#write(s);
            writer#newLine(),
        flush () = writer#flush(),
        close () = writer#close(),
    };

outputHandle stream encoding is ~OutputStream -> string -> 'a =
   (var nok = true;
    try
        w = new BufferedWriter(
                if encoding == "" then
                    new OutputStreamWriter(stream)
                else
                    new OutputStreamWriter(stream, encoding)
                fi);
        nok := false;
        writerHandle w
    finally
        if nok then
            stream#close()
        fi
    yrt);

openInFile name is string -> string -> 'a =
    inputHandle new FileInputStream(name);

openOutFile name is string -> string -> 'a =
    outputHandle new FileOutputStream(name);

typedef bin_input_handle = {
    .read is ~byte[] -> number -> number,
    .close is () -> ()
}

binInputHandle istream is ~InputStream -> 'a = {
        read buf from is ~byte[] -> number -> number =
            istream#read(buf, from, length buf - from),
        close () = istream#close()
    };

binOutputHandle ostream is ~OutputStream -> 'a = {
        write buf len is ~byte[] -> number -> () =
            ostream#write(buf, 0, len),
        close () = ostream#close(),
        flush () = ostream#flush()
    };

{
    withHandle,

    readln () = (stdin ()).readln (),

    print v =
        System#out#print(v);
        System#out#flush(),

    println v =
        System#out#println(v),

    eprintln v =
        System#err#println(v),

    sysExit exitCode =
        throw new ExitError(exitCode),

    readerHandle,
    inputHandle,
    openInFile,
    writerHandle,
    outputHandle,
    openOutFile,
    binInputHandle,
    binOutputHandle,

    get stdin () = stdin (),

    linesOfReader reader is ~BufferedReader -> list<string> =
        ReaderList#lines(reader) unsafely_as list<string>,

    readFile name encoding =
        withHandle (openInFile name encoding),

    writeFile name encoding =
        withHandle (openOutFile name encoding),

    getLines h = h.lines (),
    putLines h lines = for lines h.writeln,

    getContents h = h.contents (),

    binReadFile name =
        withHandle (binInputHandle new FileInputStream(name is string)),

    binWriteFile name writer
            is string -> ((~byte[] -> number -> ()) -> 'a) -> 'a =
        withHandle (binOutputHandle new FileOutputStream(name is string))
                   (writer . (.write)),

    // Example
    // data = binReadFile "test" (binReadAll 0);
    // binWriteFile "test2" data;
    binReadAll limit handle
            is number -> bin_input_handle -> ((~byte[] -> number -> 'a) -> 'a) =
        BinBuf#readAll(limit, handle.read, handle.close) unsafely_as 'b,

    trace msg a = (System#err#println(msg); a),

    runThread options f is list?<'a> -> (() -> ()) -> ~Thread =
        class FunThread extends Thread
            void run()
                f ()
        end;
        th = new FunThread();
        for options do i:
            case i of
                Daemon (): th#setDaemon(true);
                ClassLoader cl: th#setContextClassLoader(cl);
            esac
        done;
        th#start();
        th,

    sleep time = Thread#sleep(time * 1000),

    deleteFile fn is string -> boolean = new File(fn)#delete(),

    /// Lists files in given directory.
    /// Includes hidden files only when hidden argument is true.
    listDirectory hidden directory is boolean -> string
            -> list<{name is string, path is string,
                     file? is boolean, directory? is boolean}> =
       (res = array [];
        for new File(directory)#listFiles() do f:
            if hidden or not f#isHidden() then
                var path = f#getPath();
                if File#separator == '\' then
                    path := strReplace '\' '/' path
                fi;
                file? = f#isFile();
                push res {
                    path, file?,
                    name = f#getName(),
                    directory? = not file? and f#isDirectory()
                }
            fi
        done;
        list res),
}
